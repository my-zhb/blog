<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java方法</title>
      <link href="2020/12/01/7a37a823.html"/>
      <url>2020/12/01/7a37a823.html</url>
      
        <content type="html"><![CDATA[<h1 id="何谓方法？"><a href="#何谓方法？" class="headerlink" title="何谓方法？"></a>何谓方法？</h1><p>Java方法是语句的集合，它们在一起执行一个功能。</p><ol><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ol><h1 id="设计方法的原则"><a href="#设计方法的原则" class="headerlink" title="设计方法的原则"></a>设计方法的原则</h1><p>方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的<code>原子性，就是一个方法只完成1个功能，这样利于我们后期的扩展</code></p><h1 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h1><p>方法包含一个方法头河一个方法体</p><ul><li>修饰符：修饰符，这是可选的，告诉编译器如何调用该方法，定义了方法的访问类型。</li><li>返回值：方法可能会有返回值。</li><li>方法名：参数像是一个占位符，当方法被调用时，传递值给参数。</li><li>参数类型：参数是可选的，方法可以不包含任何参数。<ol><li>形式参数：在方法被调用时用于接收外界传入的数据</li><li>实参：调用方法是实际给方法的数据</li></ol></li><li>方法体：方法体包含具体的语句，定义该方法的功能。</li></ul><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><ol><li>什么是值传递？<br><code>值传递是对基本类型而言，传递的是该变量的副本，改变副本不影响原变量</code></li><li>什么是引用传递？<br><code>引用传递一般是对对象变量而言，传递的是该对象的地址副本，并不是原对象本身。所以引用对象进行操作会同时改变原对象。</code></li></ol><p><code>所以一般认为Java类的传递都是值传递，而这个值，实际上是对象的引用。</code></p><h1 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h1><ol><li>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</li><li>方法的重载的规则：<ul><li>方法名称必须相同。</li><li>参数列表必须不同（个数不同、或者类型不同、参数排列顺序不同）。</li><li>方法的返回类型可以相同也可以不相同。</li><li>仅仅返回类型不同不足以成为方法的重载。</li></ul></li></ol><p><code>总结：方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</code></p><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><pre><code>JDK1.5开始，Java支持传递同类型的可变参数给一个方法。在方法声明中，在指定参数类型后加一个省略号（...）。一个方法中只能指定一个可变参数，它碧血时方法的最后一个参数，任何普通的参数必须在它之前声明</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>... number)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> se </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是变量、常量、作用域、final关键字以及变量的命名规范</title>
      <link href="2020/11/30/c278e9dc.html"/>
      <url>2020/11/30/c278e9dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ol><li>变量是什么：就是可以变化的数据!</li><li>Java是一种强类型语言，每个变量都必须声明其类型。</li><li>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String userName = <span class="string">&quot;张三&quot;</span>；</span><br><span class="line"><span class="comment">//String 是数据类型</span></span><br><span class="line"><span class="comment">//userName 是变量名</span></span><br><span class="line"><span class="comment">//张三 是值</span></span><br></pre></td></tr></table></figure><p><code>注意</code></p><ul><li><code>每个变量都必须有类型，类型可以是基本类型，也可以是引用类型</code>。</li><li><code>变量名必须是合法的标识符</code>。</li><li><code>变量声明是一个完整的语句，因此每一个生命都必须以分号结束</code>。</li></ul><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul><li>类变量（也可以叫做成员变量。使用static修饰）</li><li>实例变量</li><li>局部变量（写在方法里的）</li><li>Java中有一个很重要的原则：就近原则，那个就访问那个</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">//这个是类变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//这个是实例变量</span></span><br><span class="line">    String str = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//这个是局部变量</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//这里i=0，这里就是Java中的就近原则</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//c变量赋值100，a、b只声明了没有赋值</span></span><br><span class="line">        <span class="keyword">int</span> a,b,c = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//这样每个都赋值了。</span></span><br><span class="line">        <span class="keyword">int</span> d=<span class="number">10</span>，e=<span class="number">10</span>,f=<span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><ol><li>常量是初始化后不能再改变值!不会变动的值。</li><li>所谓常量可以理解成一种特殊的变量，它的值背设定后，在程序运行过程中不允许改变。</li><li>常量名一般用大写。</li><li>常量使用final关键字修饰</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">//NUM就是常量 但是要使用final关键字修饰</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">double</span> NUM = <span class="number">2500</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h1><ol><li>所有变量、方法、类名要==见名如意==</li><li>类成员变量：首字母小写和驼峰原则：monthSalary</li><li>局部变量：首字母小写和驼峰原则</li><li>常量：首字母大写和下划线：MAX_VALUE</li><li>类名：首字母大写和驼峰原则：Man，GoodMan</li><li>方法名：首字母小写和驼峰原则：run(),runRun()</li></ol><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><ol><li>final是Java语言中的一个关键字。</li><li>final表示最终的，不可变的。</li><li>final可以修饰变量以及方法，还有类等。</li><li>final修饰的变量？<br>final修饰的变量，只能赋一次值，不允许被重新赋值。</li><li>final修饰的方法？<br>final修饰的方法无法被覆盖，被重写。</li><li>final修饰的类？<br>final修饰的类无法被继承</li><li>final控制不了能不能被调用的问题。final管的是啥？<br>final修饰的表示最后的，不能变得，不能改的。</li><li>final修饰的引用会怎么样呢？<br>final修饰的引用只能指向一个对象，不能被修改</li><li>final修饰的实例变量，系统不会赋默认值，必须手动赋值。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]agrs)</span></span>&#123;</span><br><span class="line">    <span class="comment">//final修饰的引用只能指向一个对象 ，但是被new出来的对象在堆中是可以被修改的</span></span><br><span class="line">        <span class="keyword">final</span> C c =<span class="keyword">new</span> C();</span><br><span class="line">        c.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">        c.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">张三</span><br><span class="line">王五</span><br></pre></td></tr></table></figure><h2 id="关于final赋值问题"><a href="#关于final赋值问题" class="headerlink" title="关于final赋值问题"></a>关于final赋值问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="comment">//Java默认不会给final赋默认值</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">double</span> i;</span><br><span class="line">    <span class="comment">//如果不在构造方法里赋值，程序启动报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i=<span class="number">80</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> se </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运算符</title>
      <link href="2020/11/29/778179f.html"/>
      <url>2020/11/29/778179f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java语言支持如下运算符"><a href="#Java语言支持如下运算符" class="headerlink" title="Java语言支持如下运算符"></a>Java语言支持如下运算符</h1><ul><li>算术运算符：+、-、*、/、%、++、–</li><li>赋值运算符：=</li><li>关系运算符：&gt;、&lt;、&gt;=、&lt;=、==、!=instanceof</li><li>逻辑运算符：&amp;&amp;、||、!、&amp;、|</li><li>位运算符：&amp;、|、^、~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;</li><li>条件运算符:?、:</li><li>扩展赋值运算符:+=、-=、*=、/=、%=</li></ul><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">21</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">25</span>;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">25</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="number">1.</span>加号运算</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">        </span><br><span class="line">        <span class="number">2.</span>减号运算</span><br><span class="line">        System.out.println((a-b);</span><br><span class="line">        </span><br><span class="line">        <span class="number">3.</span>乘法运算</span><br><span class="line">        System.out.println(a*b);</span><br><span class="line">        </span><br><span class="line">        <span class="number">4.</span>除法运算</span><br><span class="line">        <span class="comment">//这里输出结果为：0 </span></span><br><span class="line">        <span class="comment">//为什么会是0，因为10/25 结果为0.5，int类型就转成0了</span></span><br><span class="line">        System.out.println(a/b);</span><br><span class="line">        </span><br><span class="line">        <span class="number">5.</span>%（取余）</span><br><span class="line">        <span class="comment">//输出结果：1</span></span><br><span class="line">        <span class="comment">//因为21/10 等于 2.1 余数为：1</span></span><br><span class="line">        System.out.println(b%a);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出结果：0</span></span><br><span class="line">        <span class="comment">//25/25 等于 1.0 余数为：0</span></span><br><span class="line">        System.out.println(c%d);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出结果：10</span></span><br><span class="line">        <span class="comment">//10/21 等于 0.476... 不满足1，返回a</span></span><br><span class="line">        System.out.println(a%b);</span><br><span class="line">        </span><br><span class="line">        <span class="number">6.</span>++，--(一元运算符)</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;<span class="comment">//理解a++,表示这行代码执行后，先给b赋值，然后下次在+1</span></span><br><span class="line"><span class="keyword">int</span> c = a--;<span class="comment">//理解a--,表示这行代码执行后，先给b赋值，然后下次在-1</span></span><br><span class="line"><span class="keyword">int</span> d = ++a;<span class="comment">//理解++a,表示这行代码执行前，先+1，在给c赋值</span></span><br><span class="line"><span class="keyword">int</span> f = --a;<span class="comment">//理解--a,表示这行代码执行前，先-1，在给f赋值</span></span><br><span class="line">System.out.println(a);<span class="comment">//3</span></span><br><span class="line">System.out.println(b);<span class="comment">//3</span></span><br><span class="line">System.out.println(c);<span class="comment">//4</span></span><br><span class="line">System.out.println(d);<span class="comment">//4</span></span><br><span class="line">System.out.println(f);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动升型</span></span><br><span class="line">        <span class="comment">//混合运算返回的结果类型是当前参与运算的最大类型</span></span><br><span class="line">        <span class="comment">//如果是（byte，char，short）类型进行混合运算 Java内部会自动转换成int类型</span></span><br><span class="line">        <span class="keyword">long</span> a1 = <span class="number">123123123123L</span>;</span><br><span class="line">        <span class="keyword">int</span> b1 = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">short</span> c1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">byte</span> d1 = <span class="number">8</span>;</span><br><span class="line">        System.out.println(a1+b1+c1+d1);<span class="comment">//输出结果为Long类型</span></span><br><span class="line">        System.out.println(b1+c1+d1);<span class="comment">//输出结果为int类型</span></span><br><span class="line">        System.out.println(c1+d1);<span class="comment">//输出结果为int类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><ul><li>&amp; 逻辑与运算：两个变量都为真，结果才为true</li><li>| 逻辑或运算：两个变量有一个为真，结果就为true<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出结果：false</span></span><br><span class="line">        <span class="comment">//逻辑与运算：两个变量都为真，结果才为true</span></span><br><span class="line">        System.out.println((a&amp;b));</span><br><span class="line">        <span class="comment">//输出结果：true</span></span><br><span class="line">        <span class="comment">//逻辑或运算：两个变量有一个为真，结果就为true</span></span><br><span class="line">        System.out.println((a|b));</span><br><span class="line">        <span class="comment">//输出结果：true</span></span><br><span class="line">        <span class="comment">//如果是真，则变为假，如果为假真变为真</span></span><br><span class="line">        System.out.println(!(a&amp;b))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="短路运算-如下"><a href="#短路运算-如下" class="headerlink" title="短路运算 如下:"></a>短路运算 如下:</h1><p>什么是短路与现（&amp;&amp;）象：右边表达式不执行，这种现象叫做短路现象。<br>什么是短路或现（||）象：当左边表达式为true的时候，后面的就不执行了，否则一直执行<br>从效率上来说短路运算符不逻辑运算符效率要高，因为逻辑运算符每个条件都会判断。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">11</span>;</span><br><span class="line"><span class="comment">//&amp; 逻辑与 </span></span><br><span class="line">System.out.println(x&gt;y &amp; x&gt;y++);</span><br><span class="line"><span class="comment">//这里输出12，为什么呢，&amp; 逻辑与 x&gt;y=false 判断完成之后又执行了x&gt;y++,s所以这里输出12</span></span><br><span class="line">System.out.println(y);</span><br><span class="line"><span class="comment">//&amp;&amp; 短路与</span></span><br><span class="line">System.out.println(x&gt;y &amp;&amp; x&gt;y++);</span><br><span class="line"><span class="comment">//这里输出11，为什么呢，&amp; 逻辑与 x&gt;y=false 判断完第一个为false，直接结束</span></span><br><span class="line">System.out.println(y);</span><br><span class="line"></span><br><span class="line"><span class="comment">//| 逻辑或 </span></span><br><span class="line">System.out.println(x&gt;y | x&gt;y++);<span class="comment">//结果false</span></span><br><span class="line"><span class="comment">//这里输出12，为什么呢，| 逻辑或  x&gt;y=false，执行x&gt;y++=false，它会全部执行完只要有一个true就为true</span></span><br><span class="line">System.out.println(y);</span><br><span class="line"><span class="comment">//|| 逻辑或</span></span><br><span class="line">System.out.println(x&gt;y || x&gt;y++);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//这里输出12，为什么呢，|| 逻辑或  x&gt;y=false,不满足条件 他会继续执行。</span></span><br><span class="line">System.out.println(y);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(x&lt;y || x&gt;y++);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//这里输出11，为什么呢，|| 逻辑或 x&lt;y=true,后面的判断不执行。</span></span><br><span class="line">System.out.println(y);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A = <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">B = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">      </span><br><span class="line"><span class="number">1.</span>A&amp;B（A和B） 结果：<span class="number">0000</span> <span class="number">1100</span> （根据位运算）</span><br><span class="line">（A的第一位是<span class="number">0</span>，B的第一位是<span class="number">0</span>，结果为<span class="number">0</span>）</span><br><span class="line">（A的第二位是<span class="number">0</span>，B的第二位是<span class="number">0</span>，结果为<span class="number">0</span>）</span><br><span class="line">（A的第三位是<span class="number">1</span>，B的第三位是<span class="number">0</span>，结果为<span class="number">0</span>）</span><br><span class="line">（A的第四位是<span class="number">1</span>，B的第四位是<span class="number">0</span>，结果为<span class="number">0</span>）</span><br><span class="line">（A的第五位是<span class="number">1</span>，B的第五位是<span class="number">1</span>，结果为<span class="number">1</span>）以此类推</span><br><span class="line">      </span><br><span class="line"><span class="number">2.</span>A|B（A或者B） 结果：<span class="number">00111101</span></span><br><span class="line">解释：只要A和B的进行比较只要有<span class="number">1</span>那么值就为<span class="number">1</span></span><br><span class="line">     </span><br><span class="line"><span class="number">3.</span>A^B（亦或）结果：<span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">解释：只要A和B的进行比较只要相同就为<span class="number">0</span>，不相同为<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span>~B（取反） 结果：<span class="number">1111</span> <span class="number">0010</span></span><br><span class="line">解释：B的值为<span class="number">0</span>就取<span class="number">1</span>，为<span class="number">1</span>就取<span class="number">0</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>&lt;&lt;(左移) *<span class="number">2</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0001</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0010</span>  <span class="number">2</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0011</span>  <span class="number">3</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0100</span>  <span class="number">4</span></span><br><span class="line"><span class="number">0000</span> <span class="number">1000</span>  <span class="number">8</span></span><br><span class="line"><span class="number">0001</span> <span class="number">0000</span>  <span class="number">16</span></span><br><span class="line"><span class="number">0010</span> <span class="number">0000</span>  <span class="number">32</span></span><br><span class="line"><span class="number">0100</span> <span class="number">0000</span>  <span class="number">64</span></span><br><span class="line"><span class="number">1000</span> <span class="number">0000</span>  <span class="number">128</span></span><br><span class="line">例如：<span class="number">2</span>&lt;&lt;<span class="number">3</span> </span><br><span class="line"><span class="number">0000</span> <span class="number">0010</span> （<span class="number">2</span>进制 逢<span class="number">2</span>进<span class="number">10</span>）其中<span class="number">1</span>相左移<span class="number">3</span>格就变成 <span class="number">0001</span> <span class="number">0000</span> （这个二进制在转换成十进制就是<span class="number">16</span>）</span><br><span class="line">二进制转十进制如下: </span><br><span class="line"><span class="number">0001</span> <span class="number">0000</span> </span><br><span class="line">最后一位开始：<span class="number">0</span>乘<span class="number">2</span>的<span class="number">0</span>次方为：<span class="number">0</span></span><br><span class="line">最后二位开始：<span class="number">0</span>乘<span class="number">2</span>的<span class="number">1</span>次方为：<span class="number">0</span></span><br><span class="line">最后五位开始：<span class="number">1</span>乘<span class="number">2</span>的<span class="number">4</span>次方为：<span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>&gt;&gt;(右移) /<span class="number">2</span></span><br><span class="line">例如：<span class="number">128</span>&gt;&gt;<span class="number">5</span></span><br><span class="line"><span class="number">1000</span> <span class="number">0000</span> 相右边移动五位 即：<span class="number">0000</span> <span class="number">1000</span> （转换成十进制可得：<span class="number">8</span>）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="条件运算符（三目运算符）"><a href="#条件运算符（三目运算符）" class="headerlink" title="条件运算符（三目运算符）"></a>条件运算符（三目运算符）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        System.out.println(a=<span class="number">10</span>?<span class="string">&quot;等于10&quot;</span>:<span class="string">&quot;不等于10&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扩展赋值运算符"><a href="#扩展赋值运算符" class="headerlink" title="扩展赋值运算符"></a>扩展赋值运算符</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="number">1.</span>+=</span><br><span class="line">        a+=b;(可以理解为：a=a+b);</span><br><span class="line">        </span><br><span class="line">        <span class="number">2.</span>-=</span><br><span class="line">        a-=b;(可以理解为：a=a-b);</span><br><span class="line">        <span class="comment">//输出结果：1020</span></span><br><span class="line">        <span class="comment">//因为前面出现字符串默认从 字符串“10”+“20”</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>+a+b);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出结果：30</span></span><br><span class="line">        <span class="comment">//因为这个是先运算a+b=30，然后在进行的拼接变成了字符串“30”</span></span><br><span class="line">        System.out.println(a+b+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题：x-10-和-x-x-10-一样吗？"><a href="#问题：x-10-和-x-x-10-一样吗？" class="headerlink" title="问题：x+=10 和 x=x+10 一样吗？"></a>问题：x+=10 和 x=x+10 一样吗？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结论：不一样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> x = <span class="number">10</span>;</span><br><span class="line">x = x+<span class="number">10</span>; <span class="comment">//这里编译出错 不兼容的类型，int无法转成byte，</span></span><br><span class="line">x+=<span class="number">10</span>;<span class="comment">//这里可以 等同于  x = (byte)(x+10);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> se </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数据类型</title>
      <link href="2020/11/28/3daa4bf4.html"/>
      <url>2020/11/28/3daa4bf4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h1><table><thead><tr><th>类型</th><th align="center">描述</th></tr></thead><tbody><tr><td>byte</td><td align="center">基本数据类型-整数类型-占1个字节</td></tr><tr><td>short</td><td align="center">基本数据类型-整数类型-占2个字节</td></tr><tr><td>int</td><td align="center">基本数据类型-整数类型-占4个字节</td></tr><tr><td>long</td><td align="center">基本数据类型-整数类型-占8个字节</td></tr><tr><td>float</td><td align="center">基本数据类型-浮点类型-占4个字节</td></tr><tr><td>double</td><td align="center">基本数据类型-浮点类型-占8个字节</td></tr><tr><td>char</td><td align="center">基本数据类型-字符类型-占2个字节</td></tr><tr><td>blooean</td><td align="center">基本数据类型-boolean类型-占1个位其值只有true和false</td></tr><tr><td>calss</td><td align="center">引用数据类型-类</td></tr><tr><td>interface</td><td align="center">引用数据类型-接口</td></tr><tr><td>数组</td><td align="center">引用数据类型-数组</td></tr></tbody></table><h1 id="什么是字节"><a href="#什么是字节" class="headerlink" title="什么是字节"></a>什么是字节</h1><ol><li><p>位(bit)：是计算机内部数据储存的最小单位,11001100是一个八位二进制</p></li><li><p>字节(byte)：是计算机中数据处理的基本单位,习惯上用大写B来表示,1B(byte,字节)=8bit(位)</p></li><li><p>字符：是指计算机中使用的字母、数字、字和符号</p></li><li><p>示例：</p><p> ​    1bit表示1位</p><p> ​    1Byte表示一个字节1B=8b</p><p> ​    1024B=1KB</p><p> ​    1024KB=1M</p><p> ​    1024M=1G</p></li></ol><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><ol><li><p><code>(转换类型)变量名</code></p></li><li><p><code>有高到低转换</code></p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line">        <span class="comment">//强制转换</span></span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</span><br><span class="line">        <span class="comment">//输出结果：-128,为什么会输出-128呢?</span></span><br><span class="line">        <span class="comment">//因为byte最大值为127,内存溢出了</span></span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h2><ol><li><p><code>有低到高转换</code></p><p> <code>注意点</code>：</p><ol><li><code>不能对布尔值进行转换</code></li><li><code>不能把对象类型转换成不相干的类型</code></li><li><code>在把高容量转换到低容量的时候，强制转换</code></li><li><code>转换的时候可能存在内存溢出或者精度丢失问题</code></li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line">        <span class="comment">//字段转换</span></span><br><span class="line">        <span class="keyword">double</span> b = i;</span><br><span class="line">        <span class="comment">//输出结果：128.0</span></span><br><span class="line">        <span class="comment">//因为转成double类型了</span></span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存溢出问题"><a href="#内存溢出问题" class="headerlink" title="内存溢出问题"></a>内存溢出问题</h2><ol><li><p><code>操作比较大的数的时候，注意溢出问</code></p></li><li><p><code>JDK7新特性,数字之间可以用下划线分割表示</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> money = <span class="number">10_0000_0000</span>;</span><br><span class="line">        <span class="keyword">int</span> years = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> total = money * years;</span><br><span class="line">        <span class="comment">//输出结果：-1474836480</span></span><br><span class="line">        <span class="comment">//因为值已经溢出了</span></span><br><span class="line">        System.out.println(total);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> total2 = money * years;</span><br><span class="line">        </span><br><span class="line">         <span class="comment">//输出结果：-1474836480</span></span><br><span class="line">        <span class="comment">//因为money和years默认为int类型,这里已经出现问题,所以它们相乘也是一个int类型的数字</span></span><br><span class="line">        System.out.println(total2);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> total3 = money * ((<span class="keyword">long</span>)years);</span><br><span class="line">        <span class="comment">//输出结果：200_0000_0000</span></span><br><span class="line">        System.out.println(total3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="数据类型拓展"><a href="#数据类型拓展" class="headerlink" title="数据类型拓展"></a>数据类型拓展</h1><h2 id="整数拓展"><a href="#整数拓展" class="headerlink" title="整数拓展"></a>整数拓展</h2><p><code>进制 二进制(0b开头) 十进制 八进制(0) 十六进制(0x)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">010</span>; <span class="comment">//八进制0(逢10进8)</span></span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">0x10</span>; <span class="comment">//十六进制0x 0~9 A~F 16(逢16进10)</span></span><br><span class="line">        System.out.println(i);<span class="comment">//输出结果10</span></span><br><span class="line">        System.out.println(i2);<span class="comment">//输出结果8</span></span><br><span class="line">        System.out.println(i3);<span class="comment">//输出结果16</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浮点数拓展"><a href="#浮点数拓展" class="headerlink" title="浮点数拓展"></a>浮点数拓展</h2><p><code>浮点数是有舍入误差的,接近但是不等于</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.1f</span>;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">0.1</span>;</span><br><span class="line">        System.out.println(f==d);<span class="comment">//输出false,f不等于d</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> f1 = <span class="number">214121231f</span>;</span><br><span class="line">        <span class="keyword">float</span> f2 = f1+<span class="number">1</span>;</span><br><span class="line">        System.out.println(f1==f2);<span class="comment">//输出true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符拓展"><a href="#字符拓展" class="headerlink" title="字符拓展"></a>字符拓展</h2><p><code>所有的字符本质都是数字</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line">        System.out.println(c1);<span class="comment">//输出结果：A</span></span><br><span class="line">        <span class="comment">//(int)c1 强制转换</span></span><br><span class="line">        System.out.println((<span class="keyword">int</span>)c1);<span class="comment">//输出结果：65</span></span><br><span class="line">        System.out.println(c2);<span class="comment">//输出结果：中</span></span><br><span class="line">        System.out.println((<span class="keyword">int</span>)c2);<span class="comment">//输出结果：20013</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> se </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EMQX配置wss</title>
      <link href="2020/11/27/a464dc8f.html"/>
      <url>2020/11/27/a464dc8f.html</url>
      
        <content type="html"><![CDATA[<h1 id="MQTT协议介绍"><a href="#MQTT协议介绍" class="headerlink" title="MQTT协议介绍"></a>MQTT协议介绍</h1><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的”轻量级”通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><p>MQTT是一个基于客户端-服务器的消息发布/订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用</p><p>此处跳过安装过程！！</p><h1 id="1-emqx-conf"><a href="#1-emqx-conf" class="headerlink" title="1. emqx.conf"></a>1. emqx.conf</h1><p>emqx.conf 默认是在 /etc/ 目录下的</p><p>emqx.conf就修改<code>listener.wss.external.keyfile</code>,<code>listener.wss.external.certfile</code> 其他默认保存就可以了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## Path to the file containing the user&#39;s private PEM-encoded key.</span><br><span class="line">##</span><br><span class="line">## See: listener.ssl.$name.keyfile</span><br><span class="line">##</span><br><span class="line">## Value: File</span><br><span class="line"># 此处修改自己证书密钥的路径</span><br><span class="line">listener.wss.external.keyfile &#x3D; &#x2F;etc&#x2F;emqx&#x2F;certs&#x2F;key.pem</span><br><span class="line">## Path to a file containing the user certificate.</span><br><span class="line">##</span><br><span class="line">## See: listener.ssl.$name.certfile</span><br><span class="line">##</span><br><span class="line">## Value: File</span><br><span class="line"># 此处修改自己证书的路径</span><br><span class="line">listener.wss.external.certfile &#x3D; &#x2F;etc&#x2F;emqx&#x2F;certs&#x2F;cert.pem</span><br></pre></td></tr></table></figure><p>证书申请可以参考：<a href="https://blog.myiszhb.cn/2020/11/26/733eea1c.hmtl">https://blog.myiszhb.cn/2020/11/26/733eea1c.hmtl</a></p><h1 id="2-重启"><a href="#2-重启" class="headerlink" title="2. 重启"></a>2. 重启</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart emqx</span><br></pre></td></tr></table></figure><h1 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h1><p>emqx 默认地址是ip:18083<br>emqx 默认账号: admin 密码:public</p><p>这是ws的</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201127144042.png" alt="@VB5UN8R03T(~3LC40}YH}P"></p><p>这是wss的</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201127144132.png"></p><p>自此emqx的wss就完成了</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emqx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>certbot白嫖https证书</title>
      <link href="2020/11/26/733eea1c.html"/>
      <url>2020/11/26/733eea1c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-certbot安装"><a href="#1-certbot安装" class="headerlink" title="1.certbot安装"></a>1.certbot安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line">wget https:&#x2F;&#x2F;dl.eff.org&#x2F;certbot-auto</span><br><span class="line">chmod a+x certbot-auto</span><br></pre></td></tr></table></figure><h1 id="2-认证方式"><a href="#2-认证方式" class="headerlink" title="2.认证方式"></a>2.认证方式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dns-01：给域名添加一个 DNS TXT 记录。</span><br><span class="line">http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。</span><br><span class="line">tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。</span><br></pre></td></tr></table></figure><h1 id="3-申请证书"><a href="#3-申请证书" class="headerlink" title="3. 申请证书"></a>3. 申请证书</h1><p>这里<code>myiszhb.cn</code> 域名最好加是<code>xxx.myiszhb.cn</code>这样才是受信任的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;certbot-auto certonly  -d *.myiszhb.cn  --manual --preferred-challenges dns --server https:&#x2F;&#x2F;acme-v02.api.letsencrypt.org&#x2F;directory </span><br></pre></td></tr></table></figure><p>参数简介</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。</span><br><span class="line">--manual  表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择</span><br><span class="line">-d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn（可以替换为你自己的域名）</span><br><span class="line">--preferred-challenges dns，使用 DNS 方式校验域名所有权</span><br><span class="line">--server，Let&#39;s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。</span><br></pre></td></tr></table></figure><h1 id="4-交互界面"><a href="#4-交互界面" class="headerlink" title="4.交互界面"></a>4.交互界面</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Saving debug log to &#x2F;var&#x2F;log&#x2F;letsencrypt&#x2F;letsencrypt.log</span><br><span class="line">Plugins selected: Authenticator manual, Installer None</span><br><span class="line">Enter email address (used for urgent renewal and security notices) (Enter &#39;c&#39; to</span><br><span class="line">cancel): xxx@163.com</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Please read the Terms of Service at</span><br><span class="line">https:&#x2F;&#x2F;letsencrypt.org&#x2F;documents&#x2F;LE-SA-v1.2-November-15-2017.pdf. You must</span><br><span class="line">agree in order to register with the ACME server at</span><br><span class="line">https:&#x2F;&#x2F;acme-v02.api.letsencrypt.org&#x2F;directory</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(A)gree&#x2F;(C)ancel: A</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Would you be willing to share your email address with the Electronic Frontier</span><br><span class="line">Foundation, a founding partner of the Let&#39;s Encrypt project and the non-profit</span><br><span class="line">organization that develops Certbot? We&#39;d like to send you email about our work</span><br><span class="line">encrypting the web, EFF news, campaigns, and ways to support digital freedom.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(Y)es&#x2F;(N)o: Y</span><br><span class="line"></span><br><span class="line">Obtaining a new certificate</span><br><span class="line">Performing the following challenges:</span><br><span class="line">dns-01 challenge for archerwong.cn</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">NOTE: The IP of this machine will be publicly logged as having requested this</span><br><span class="line">certificate. If you&#39;re running certbot in manual mode on a machine that is not</span><br><span class="line">your server, please ensure you&#39;re okay with that.</span><br><span class="line"></span><br><span class="line">Are you OK with your IP being logged?</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(Y)es&#x2F;(N)o: (Y)es&#x2F;(N)o: Y</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Please deploy a DNS TXT record under the name</span><br><span class="line">_acme-challenge.myiszhb.cn with the following value:</span><br><span class="line"></span><br><span class="line">UCSGGMLKXQ7BKZ3XOb-wLUM8yvEI4BGt-86waMxnJJ3</span><br><span class="line"></span><br><span class="line">Before continuing, verify the record is deployed.</span><br><span class="line">- - - - - - - - - - - - - - - - -</span><br></pre></td></tr></table></figure><p>自此证书就申请完毕了</p><p>如需自动续费参考：<a href="https://www.cnblogs.com/redirect/p/10140254.html">https://www.cnblogs.com/redirect/p/10140254.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> certbot </tag>
            
            <tag> 证书 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
